{"version":3,"sources":["Components/Filter.js","Components/People.js","Components/Form.js","Components/Notification.js","Services/phonebook.js","App.js","index.js"],"names":["Filter","props","value","searchName","onChange","changeSearchName","Person","person","name","number","onClick","removeEntry","id","People","persons","map","PersonForm","onSubmit","addName","newName","addNewName","newNumber","addNewNumber","Notification","notification","className","type","message","baseUrl","newEntry","axios","post","then","response","data","get","console","log","delete","updatedEntry","put","App","useState","setPersons","setNewName","setNewNumber","setSearchName","setNotificationMessage","setNotifyWith","setTimeout","reg","RegExp","searchPersons","filter","exec","useEffect","phoneService","initialPeople","event","target","preventDefault","foundEntry","find","window","confirm","updatedPerson","catch","error","concat","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8fb218f1.chunk.js","sourcesContent":["import React from 'react'\n\nconst Filter = (props) => {\n\n    return (\n        <input value={props.searchName} onChange={props.changeSearchName} />\n    )\n}\n\nexport default Filter","\nimport React from 'react'\n\n\nconst People = (props) => {\n    const { persons } = props\n    return (persons.map(person => <Person key={person.name} person={person} removeEntry={props.removeEntry} />))\n}\nconst Person = (props) => {\n    const { person } = props\n\n    return (<div>{person.name} {person.number}<button onClick={() => props.removeEntry(person.id)}>DELETE</button></div>)\n}\nexport default People","import React from 'react'\n\nconst PersonForm = (props) => {\n    return (\n        <form onSubmit={props.addName}>\n            <div>\n                name: <input value={props.newName}\n                    onChange={props.addNewName} />\n            </div>\n            <div>\n                number: <input value={props.newNumber}\n                    onChange={props.addNewNumber} />\n            </div>\n            <div>\n                <button >add</button>\n            </div>\n        </form>\n    )\n}\n\nexport default PersonForm\n\n","import React from 'react'\n\nconst Notification = ({ notification }) => {\n    if (notification === null) {\n        return null\n    }\n    else\n        return (<h2 className={notification.type}>{notification.message}</h2>\n        )\n}\n\nexport default Notification","import axios from 'axios'\nconst baseUrl = '/persons'\n\nconst getAll = () => {\n    const request = axios.get(baseUrl)\n    return request.then(response => response.data)\n}\n\nconst add = (newEntry) => {\n    const request = axios.post(baseUrl, newEntry)\n    return request.then(response => response.data)\n}\n\nconst change = (updatedEntry) => {\n    const request = axios.put(`${baseUrl}/${updatedEntry.id}`, updatedEntry)\n    return request.then(response => response.data)\n\n}\nconst remove = (id) => {\n    console.log(id)\n    const request = axios.delete(`${baseUrl}/${id}`)\n    return request.then(response => console.log(response))\n}\n\nexport default { add, getAll, remove, change }","import React, { useState, useEffect } from 'react'\n\n\nimport Filter from './Components/Filter'\nimport People from './Components/People'\nimport PersonForm from './Components/Form'\nimport Notification from './Components/Notification'\n\nimport phoneService from './Services/phonebook'\n\n\nconst App = () => {\n  const [persons, setPersons] = useState([])\n  const [newName, setNewName] = useState('')\n  const [newNumber, setNewNumber] = useState('')\n  const [searchName, setSearchName] = useState('')\n  const [notification, setNotificationMessage] = useState(null)\n\n  const setNotifyWith = (message, type = 'success') => {\n    setNotificationMessage({ message, type })\n    setTimeout(() => setNotificationMessage(null), 4000)\n  }\n\n\n  const addName = (event) => {\n    event.preventDefault()\n    const foundEntry = persons.find(person => person.name === newName)\n    if (foundEntry) {\n      if (window.confirm(`Do you want to update ${foundEntry.name}'s number?`)) {\n        const updatedEntry = { ...foundEntry, number: newNumber }\n        phoneService.change(updatedEntry)\n          .then(\n            updatedPerson => {\n              setPersons(persons.map(person => person.id !== updatedEntry.id ? person : updatedPerson))\n              setNotifyWith(`Changed ${updatedPerson.name}`)\n              setNewName(\"\")\n              setNewNumber(\"\")\n            })\n          .catch(error => {\n            setNotifyWith(`${updatedEntry.name} has already been removed`, 'error')\n            setPersons(persons.filter(person => person.id !== foundEntry.id))\n          })\n\n      }\n    }\n\n    else {\n      const newEntry = { name: newName, number: newNumber }\n      phoneService.add(newEntry)\n        .then(newEntry => {\n          setPersons(persons.concat(newEntry))\n          setNotifyWith(`Added ${newEntry.name} to the phonebook`)\n          setNewName(\"\")\n          setNewNumber(\"\")\n        })\n\n    }\n  }\n  const addNewName = (event) => {\n    setNewName(event.target.value)\n  }\n  const addNewNumber = (event) => {\n    setNewNumber(event.target.value)\n  }\n\n  const reg = new RegExp(searchName, \"i\");\n\n  const searchPersons = persons.filter(person => reg.exec(person.name))\n\n  const changeSearchName = (event) => {\n    setSearchName(event.target.value)\n\n  }\n\n  const removeEntry = (id) => {\n    if (window.confirm(`Do you really want to delete this?`)) {\n      phoneService.remove(id)\n      setPersons(persons.filter(person => person.id !== id))\n    }\n\n  }\n\n  const hook = () => {\n    phoneService.getAll()\n      .then(initialPeople => setPersons(initialPeople))\n  }\n\n  useEffect(hook, []) // the empty array means this efect will only be run after the first render\n\n  return (\n    <div>\n      {/* <div>debug: {searchPersons}</div> */}\n      <h2>Phonebook</h2>\n      <Filter changeSearchName={changeSearchName} />\n      <Notification notification={notification} />\n      <h2>add a new</h2>\n      <PersonForm\n        newName={newName}\n        newNumber={newNumber}\n        addNewNumber={addNewNumber}\n        addName={addName}\n        addNewName={addNewName}\n      />\n      <h2>Numbers</h2>\n      <People persons={searchPersons} removeEntry={removeEntry} />\n    </div>\n\n\n  )\n}\n\nexport default App","import ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n)"],"sourceRoot":""}